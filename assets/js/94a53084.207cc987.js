"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1084],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>p});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(r),p=a,d=m["".concat(c,".").concat(p)]||m[p]||f[p]||o;return r?n.createElement(d,l(l({ref:t},u),{},{components:r})):n.createElement(d,l({ref:t},u))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},62173:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={},l="IConsumerThrottlingMetric interface",i={unversionedId:"reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/IConsumerThrottlingMetric",id:"reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/IConsumerThrottlingMetric",title:"IConsumerThrottlingMetric interface",description:"Defines a metric that is used by the KafkaFlow consumer throttling feature.",source:"@site/docs/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/IConsumerThrottlingMetric.md",sourceDirName:"reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric",slug:"/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/",permalink:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/",draft:!1,editUrl:"https://github.com/farfetch/kafkaflow/tree/master/website/docs/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/IConsumerThrottlingMetric.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IConsumerThrottlingAction.ExecuteAsync method",permalink:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingAction/ExecuteAsync"},next:{title:"IConsumerThrottlingMetric.GetValueAsync method",permalink:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/GetValueAsync"}},c={},s=[{value:"Members",id:"members",level:2},{value:"See Also",id:"see-also",level:2}],u={toc:s};function f(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"iconsumerthrottlingmetric-interface"},"IConsumerThrottlingMetric interface"),(0,a.kt)("p",null,"Defines a metric that is used by the KafkaFlow consumer throttling feature."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public interface IConsumerThrottlingMetric\n")),(0,a.kt)("h2",{id:"members"},"Members"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"name"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/GetValueAsync"},"GetValueAsync"),"()"),(0,a.kt)("td",{parentName:"tr",align:null},"Retrieves the value of the metric defined in the implementation of this interface.")))),(0,a.kt)("h2",{id:"see-also"},"See Also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"namespace\xa0",(0,a.kt)("a",{parentName:"li",href:"/kafkaflow/docs/reference/KafkaFlow/"},"KafkaFlow.Middlewares.ConsumerThrottling"))))}f.isMDXComponent=!0}}]);