"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6757],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>p});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(r),p=o,d=m["".concat(c,".").concat(p)]||m[p]||f[p]||a;return r?n.createElement(d,l(l({ref:t},u),{},{components:r})):n.createElement(d,l({ref:t},u))}));function p(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},90205:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(87462),o=(r(67294),r(3905));const a={},l="IConsumerThrottlingMetric.GetValueAsync method",i={unversionedId:"reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/GetValueAsync",id:"reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/GetValueAsync",title:"IConsumerThrottlingMetric.GetValueAsync method",description:"Retrieves the value of the metric defined in the implementation of this interface.",source:"@site/docs/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/GetValueAsync.md",sourceDirName:"reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric",slug:"/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/GetValueAsync",permalink:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/GetValueAsync",draft:!1,editUrl:"https://github.com/farfetch/kafkaflow/tree/master/website/docs/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/GetValueAsync.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IConsumerThrottlingMetric interface",permalink:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/"},next:{title:"IConsumerThrottlingActionConfigurationBuilder interface",permalink:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling.Configuration/IConsumerThrottlingActionConfigurationBuilder/"}},c={},s=[{value:"Return Value",id:"return-value",level:2},{value:"See Also",id:"see-also",level:2}],u={toc:s};function f(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"iconsumerthrottlingmetricgetvalueasync-method"},"IConsumerThrottlingMetric.GetValueAsync method"),(0,o.kt)("p",null,"Retrieves the value of the metric defined in the implementation of this interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public Task<long> GetValueAsync()\n")),(0,o.kt)("h2",{id:"return-value"},"Return Value"),(0,o.kt)("p",null,"A Task representing the asynchronous operation, with a Int64 result representing the metric's value."),(0,o.kt)("h2",{id:"see-also"},"See Also"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"interface\xa0",(0,o.kt)("a",{parentName:"li",href:"/kafkaflow/docs/reference/KafkaFlow/KafkaFlow.Middlewares.ConsumerThrottling/IConsumerThrottlingMetric/"},"IConsumerThrottlingMetric")),(0,o.kt)("li",{parentName:"ul"},"namespace\xa0",(0,o.kt)("a",{parentName:"li",href:"/kafkaflow/docs/reference/KafkaFlow/"},"KafkaFlow.Middlewares.ConsumerThrottling"))))}f.isMDXComponent=!0}}]);